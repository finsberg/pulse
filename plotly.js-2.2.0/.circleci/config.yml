version: 2.0

# Inspired by:
# https://github.com/CircleCI-Public/circleci-demo-workflows/blob/workspace-forwarding/.circleci/config.yml
# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
#
# For list of official CircleCI node.js images, go to:
# https://hub.docker.com/r/circleci/node/tags/

jobs:
  install-and-cibuild:
    docker:
      - image: circleci/node:12.22.1
    working_directory: ~/plotly.js
    steps:
      - checkout
      - run:
          name: set heap option before very first node.js call
          command: |
            export NODE_OPTIONS='--max-old-space-size=4096'
      - run:
          name: Install dependencies
          command: |
            npm ci
      - run:
          name: List dependency versions
          command: |
            echo "npm: $(npm --version)"
            echo "node: $(node --version)"
            npm ls || true
      - run:
          name: Pretest
          command: |
            npm run pretest
            npm run cibuild
      - run:
          command: rm -rf .git
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - plotly.js

  no-gl-jasmine:
    docker:
      # need '-browsers' version to test in real (xvfb-wrapped) browsers
      - image: circleci/node:12.22.1-browsers
    parallelism: 8
    working_directory: ~/plotly.js
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run jasmine tests (part A)
          command: .circleci/test.sh no-gl-jasmine

  webgl-jasmine:
    docker:
      # need '-browsers' version to test in real (xvfb-wrapped) browsers
      - image: circleci/node:12.22.1-browsers
    parallelism: 8
    working_directory: ~/plotly.js
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run jasmine tests (part B)
          command: .circleci/test.sh webgl-jasmine

  flaky-no-gl-jasmine:
    docker:
      # need '-browsers' version to test in real (xvfb-wrapped) browsers
      - image: circleci/node:12.22.1-browsers
    working_directory: ~/plotly.js
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run jasmine tests (part C)
          command: .circleci/test.sh flaky-no-gl-jasmine

  make-baselines:
    parallelism: 4
    docker:
      - image: circleci/python:3.8.9
    working_directory: ~/plotly.js
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: which pip3 version
          command: which pip3 && pip3 --version
      - run:
          name: install kaleido v0.2.1
          command: python3 -m pip install kaleido==0.2.1
      - run:
          name: install plotly.io v5.0.0
          command: python3 -m pip install plotly==5.0.0
      - run:
          name: install liberation2 fonts
          command: sudo apt-get install fonts-liberation2
      - run:
          name: install OpenSans fonts
          command: sudo apt-get install fonts-open-sans
      - run:
          name: install NotoSansCJK fonts
          command: sudo apt install fonts-noto-cjk
      - run:
          name: download google fonts e.g. Dosis, GravitasOne, NotoSansMono, NotoSans, NotoSerif, Old_Standard_TT, PT_Sans_Narrow, Raleway and Roboto
          command: python3 .circleci/download_google_fonts.py
      - run:
          name: install downloaded google fonts
          command: |
            sudo cp -r .circleci/fonts/ /usr/share/
            sudo fc-cache -f
      - run:
          name: create all png files
          command: .circleci/test.sh make-baselines
      - persist_to_workspace:
          root: ~/
          paths:
            - plotly.js

  test-baselines:
    docker:
      - image: circleci/node:12.22.1
    working_directory: ~/plotly.js
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: compare pixels
          command: .circleci/test.sh test-image ; find build -maxdepth 1 -type f -delete
      - store_artifacts:
          path: build
          destination: /

  make-exports:
    docker:
      - image: circleci/python:3.8.9
    working_directory: ~/plotly.js
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: which pip3 version
          command: which pip3 && pip3 --version
      - run:
          name: install kaleido v0.2.1
          command: python3 -m pip install kaleido==0.2.1
      - run:
          name: install plotly.io v5.0.0
          command: python3 -m pip install plotly==5.0.0
      - run:
          name: install poppler-utils to have pdftops for exporting eps
          command: sudo apt-get install poppler-utils
      - run:
          name: create svg, jpg, jpeg, webp, pdf and eps files
          command: python3 test/image/make_exports.py
      - persist_to_workspace:
          root: ~/
          paths:
            - plotly.js

  test-exports:
    docker:
      - image: circleci/node:12.22.1
    working_directory: ~/plotly.js
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: test export sizes
          command: node test/image/export_test.js ; find build -maxdepth 1 -type f -delete
      - store_artifacts:
          path: build
          destination: /

  mock-validation:
    docker:
      - image: circleci/node:12.22.1
    working_directory: ~/plotly.js
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Test validation using node.js and jsdom
          command: npm run test-plain-obj
      - run:
          name: Validate mocks
          command: npm run test-mock

  source-syntax:
    docker:
      - image: circleci/node:12.22.1
    working_directory: ~/plotly.js
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run syntax tests on source files
          command: .circleci/test.sh source-syntax

  jasmine-bundle:
    docker:
      # need '-browsers' version to test in real (xvfb-wrapped) browsers
      - image: circleci/node:12.22.1-browsers
    working_directory: ~/plotly.js
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run jasmine tests (part D)
          command: .circleci/test.sh jasmine-bundle

  publish-dist:
    docker:
      - image: circleci/node:12.22.1
    working_directory: ~/plotly.js
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Build dist/
          command: npm run build
      - store_artifacts:
          path: dist
          destination: dist
      - run:
          name: Pack tarball
          command: |
            npm pack
            version=$(node -e "console.log(require('./package.json').version)")
            mv plotly.js-$version.tgz plotly.js.tgz
      - store_artifacts:
          path: plotly.js.tgz
          destination: /plotly.js.tgz
      - run:
          name: Show URLs to build files
          command: |
            PROJECT_NUM=45646037
            echo https://$CIRCLE_BUILD_NUM-$PROJECT_NUM-gh.circle-artifacts.com/0/plotly.js.tgz
            echo https://$CIRCLE_BUILD_NUM-$PROJECT_NUM-gh.circle-artifacts.com/0/dist/plotly.js
            echo https://$CIRCLE_BUILD_NUM-$PROJECT_NUM-gh.circle-artifacts.com/0/dist/plotly.min.js
            echo https://$CIRCLE_BUILD_NUM-$PROJECT_NUM-gh.circle-artifacts.com/0/dist/plot-schema.json
      - persist_to_workspace:
          root: ~/
          paths:
            - plotly.js

  test-dist1:
    docker:
      - image: circleci/node:12.22.1
    working_directory: ~/plotly.js
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Test plotly.min.js import using requirejs
          command: npm run test-requirejs
      - run:
          name: Test plotly bundles againt unexpected characters
          command: npm run no-bad-char
      - run:
          name: Test certain bundles against function constructors
          command: npm run no-new-func

  test-dist2:
    docker:
      - image: circleci/node:12.22.1
    working_directory: ~/plotly.js
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Test plotly bundles against es6
          command: npm run no-es6-dist
      - run:
          name: Test plotly bundles againt duplicate keys
          command: npm run no-dup-keys

workflows:
  version: 2
  build-and-test:
    jobs:
      - install-and-cibuild
      - jasmine-bundle:
          requires:
            - install-and-cibuild
      - no-gl-jasmine:
          requires:
            - install-and-cibuild
      - webgl-jasmine:
          requires:
            - install-and-cibuild
      - flaky-no-gl-jasmine:
          requires:
            - install-and-cibuild
      - make-baselines:
          requires:
            - install-and-cibuild
      - test-baselines:
          requires:
            - make-baselines
      - make-exports:
          requires:
            - install-and-cibuild
      - test-exports:
          requires:
            - make-exports
      - mock-validation:
          requires:
            - install-and-cibuild
      - source-syntax:
          requires:
            - install-and-cibuild
      - publish-dist:
          requires:
            - install-and-cibuild
      - test-dist1:
          requires:
            - publish-dist
      - test-dist2:
          requires:
            - publish-dist
