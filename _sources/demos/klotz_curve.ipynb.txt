{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Klotz curve\n",
    "\n",
    "Inlate a geometry to a pressure using different\n",
    "material models, and compare with the Klotz curve."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "import math\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pulse\n",
    "\n",
    "try:\n",
    "    from dolfin_adjoint import Constant, DirichletBC\n",
    "except ImportError:\n",
    "    from dolfin import Constant, DirichletBC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2021-05-11 20:22:52,305 - pulse.geometry_utils - INFO - \n",
      "Load mesh from h5\n"
     ]
    }
   ],
   "source": [
    "geometry = pulse.HeartGeometry.from_file(pulse.mesh_paths[\"simple_ellipsoid\"])\n",
    "geometry.mesh.coordinates()[:] *= 3.15\n",
    "ED_pressure = 1.6  # kPa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def setup_material(material_model):\n",
    "    \"\"\"\n",
    "    Choose parameters based on\n",
    "\n",
    "    Hadjicharalambous, Myrianthi, et al. \"Analysis of passive\n",
    "    cardiac constitutive laws for parameter estimation using 3D\n",
    "    tagged MRI.\" Biomechanics and modeling in mechanobiology 14.4\n",
    "    (2015): 807-828.\n",
    "\n",
    "    These parameters did not really match the Klotz curve here.\n",
    "    Perhaps they did some more tuning?\n",
    "\n",
    "    \"\"\"\n",
    "    if material_model == \"guccione\":\n",
    "\n",
    "        matparams = pulse.Guccione.default_parameters()\n",
    "        matparams[\"C\"] = 0.18  # kPa\n",
    "        matparams[\"bf\"] = 27.75\n",
    "        matparams[\"bt\"] = 5.37\n",
    "        matparams[\"bfs\"] = 2.445\n",
    "        material = pulse.Guccione(\n",
    "            parameters=matparams, f0=geometry.f0, s0=geometry.s0, n0=geometry.n0\n",
    "        )\n",
    "\n",
    "    elif material_model == \"neo_hookean\":\n",
    "\n",
    "        matparams = pulse.NeoHookean.default_parameters()\n",
    "        matparams[\"mu\"] = 10.0  # kPa\n",
    "        material = pulse.NeoHookean(parameters=matparams)\n",
    "\n",
    "    elif material_model == \"holzapfel_ogden\":\n",
    "\n",
    "        matparams = pulse.HolzapfelOgden.default_parameters()\n",
    "\n",
    "        matparams[\"a\"] = 4.0  # kPa\n",
    "        matparams[\"a_f\"] = 10.0  # kPa\n",
    "        matparams[\"b\"] = 5.0\n",
    "        matparams[\"b_f\"] = 5.0\n",
    "        material = pulse.HolzapfelOgden(\n",
    "            parameters=matparams, f0=geometry.f0, s0=geometry.s0, n0=geometry.n0\n",
    "        )\n",
    "    return material"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def klotz_curve():\n",
    "    \"\"\"\n",
    "\n",
    "    EDPVR based on Klotz curve\n",
    "\n",
    "    Klotz, Stefan, et al. \"Single-beat estimation of end-diastolic\n",
    "    pressure-volume relationship: a novel method with potential for\n",
    "    noninvasive application.\" American Journal of Physiology-Heart and\n",
    "    Circulatory Physiology 291.1 (2006): H403-H412.\n",
    "\n",
    "    \"\"\"\n",
    "\n",
    "    # Some point at the EDPVR line\n",
    "    Vm = 148.663\n",
    "    Pm = ED_pressure\n",
    "\n",
    "    # Some constants\n",
    "    An = 27.8\n",
    "    Bn = 2.76\n",
    "\n",
    "    # kpa to mmhg\n",
    "    Pm = Pm * 760 / 101.325\n",
    "\n",
    "    V0 = Vm * (0.6 - 0.006 * Pm)\n",
    "    V30 = V0 + (Vm - V0) / (Pm / An) ** (1.0 / Bn)\n",
    "\n",
    "    beta = math.log(Pm / 30.0) / math.log(Vm / V30)\n",
    "    alpha = 30.0 / V30 ** beta\n",
    "\n",
    "    # Unloaded volume (not used here)\n",
    "    # P_V0 = alpha * V0 ** beta\n",
    "\n",
    "    vs = [V0]\n",
    "    ps = [0.0]\n",
    "    for p in np.linspace(1.0, 12.0):\n",
    "        vi = (p / alpha) ** (1.0 / beta)\n",
    "        vs.append(vi)\n",
    "        ps.append(p * 101.325 / 760)  # Convert from mmhg to kPa\n",
    "\n",
    "    return vs, ps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2021-05-11 20:23:20,873 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:23:20,874 - pulse.iterate - INFO - Current control: 0.000\n",
      "2021-05-11 20:23:20,875 - pulse.iterate - INFO - Target: 0.178\n",
      "2021-05-11 20:23:31,082 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:23:31,083 - pulse.iterate - INFO - Current control: 0.178\n",
      "2021-05-11 20:23:31,084 - pulse.iterate - INFO - Target: 0.356\n",
      "2021-05-11 20:23:32,672 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:23:32,673 - pulse.iterate - INFO - Current control: 0.356\n",
      "2021-05-11 20:23:32,673 - pulse.iterate - INFO - Target: 0.533\n",
      "2021-05-11 20:23:34,201 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:23:34,202 - pulse.iterate - INFO - Current control: 0.533\n",
      "2021-05-11 20:23:34,202 - pulse.iterate - INFO - Target: 0.711\n",
      "2021-05-11 20:23:35,736 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:23:35,736 - pulse.iterate - INFO - Current control: 0.711\n",
      "2021-05-11 20:23:35,737 - pulse.iterate - INFO - Target: 0.889\n",
      "2021-05-11 20:23:37,405 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:23:37,406 - pulse.iterate - INFO - Current control: 0.889\n",
      "2021-05-11 20:23:37,406 - pulse.iterate - INFO - Target: 1.067\n",
      "2021-05-11 20:23:39,078 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:23:39,079 - pulse.iterate - INFO - Current control: 1.067\n",
      "2021-05-11 20:23:39,079 - pulse.iterate - INFO - Target: 1.244\n",
      "2021-05-11 20:23:40,780 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:23:40,781 - pulse.iterate - INFO - Current control: 1.244\n",
      "2021-05-11 20:23:40,782 - pulse.iterate - INFO - Target: 1.422\n",
      "2021-05-11 20:23:42,459 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:23:42,460 - pulse.iterate - INFO - Current control: 1.422\n",
      "2021-05-11 20:23:42,460 - pulse.iterate - INFO - Target: 1.600\n",
      "2021-05-11 20:23:44,213 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:23:44,214 - pulse.iterate - INFO - Current control: 0.000\n",
      "2021-05-11 20:23:44,215 - pulse.iterate - INFO - Target: 0.178\n",
      "2021-05-11 20:24:01,428 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:24:01,430 - pulse.iterate - INFO - Current control: 0.178\n",
      "2021-05-11 20:24:01,430 - pulse.iterate - INFO - Target: 0.356\n",
      "2021-05-11 20:24:04,798 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:24:04,798 - pulse.iterate - INFO - Current control: 0.356\n",
      "2021-05-11 20:24:04,799 - pulse.iterate - INFO - Target: 0.533\n",
      "2021-05-11 20:24:08,041 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:24:08,041 - pulse.iterate - INFO - Current control: 0.533\n",
      "2021-05-11 20:24:08,042 - pulse.iterate - INFO - Target: 0.711\n",
      "2021-05-11 20:24:11,123 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:24:11,123 - pulse.iterate - INFO - Current control: 0.711\n",
      "2021-05-11 20:24:11,124 - pulse.iterate - INFO - Target: 0.889\n",
      "2021-05-11 20:24:13,914 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:24:13,915 - pulse.iterate - INFO - Current control: 0.889\n",
      "2021-05-11 20:24:13,916 - pulse.iterate - INFO - Target: 1.067\n",
      "2021-05-11 20:24:16,813 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:24:16,814 - pulse.iterate - INFO - Current control: 1.067\n",
      "2021-05-11 20:24:16,814 - pulse.iterate - INFO - Target: 1.244\n",
      "2021-05-11 20:24:19,719 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:24:19,719 - pulse.iterate - INFO - Current control: 1.244\n",
      "2021-05-11 20:24:19,720 - pulse.iterate - INFO - Target: 1.422\n",
      "2021-05-11 20:24:22,558 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:24:22,558 - pulse.iterate - INFO - Current control: 1.422\n",
      "2021-05-11 20:24:22,559 - pulse.iterate - INFO - Target: 1.600\n",
      "2021-05-11 20:24:25,465 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:24:25,466 - pulse.iterate - INFO - Current control: 0.000\n",
      "2021-05-11 20:24:25,466 - pulse.iterate - INFO - Target: 0.178\n",
      "2021-05-11 20:25:07,017 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:25:07,018 - pulse.iterate - INFO - Current control: 0.178\n",
      "2021-05-11 20:25:07,019 - pulse.iterate - INFO - Target: 0.356\n",
      "2021-05-11 20:25:09,760 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:25:09,761 - pulse.iterate - INFO - Current control: 0.356\n",
      "2021-05-11 20:25:09,761 - pulse.iterate - INFO - Target: 0.533\n",
      "2021-05-11 20:25:12,447 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:25:12,448 - pulse.iterate - INFO - Current control: 0.533\n",
      "2021-05-11 20:25:12,448 - pulse.iterate - INFO - Target: 0.711\n",
      "2021-05-11 20:25:15,314 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:25:15,315 - pulse.iterate - INFO - Current control: 0.711\n",
      "2021-05-11 20:25:15,315 - pulse.iterate - INFO - Target: 0.889\n",
      "2021-05-11 20:25:18,277 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:25:18,277 - pulse.iterate - INFO - Current control: 0.889\n",
      "2021-05-11 20:25:18,278 - pulse.iterate - INFO - Target: 1.067\n",
      "2021-05-11 20:25:21,187 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:25:21,188 - pulse.iterate - INFO - Current control: 1.067\n",
      "2021-05-11 20:25:21,189 - pulse.iterate - INFO - Target: 1.244\n",
      "2021-05-11 20:25:24,083 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:25:24,083 - pulse.iterate - INFO - Current control: 1.244\n",
      "2021-05-11 20:25:24,084 - pulse.iterate - INFO - Target: 1.422\n",
      "2021-05-11 20:25:26,934 - pulse.iterate - INFO - Iterating....\n",
      "2021-05-11 20:25:26,934 - pulse.iterate - INFO - Current control: 1.422\n",
      "2021-05-11 20:25:26,935 - pulse.iterate - INFO - Target: 1.600\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def fix_basal_plane(W):\n",
    "    V = W if W.sub(0).num_sub_spaces() == 0 else W.sub(0)\n",
    "    bc = DirichletBC(\n",
    "        V, Constant((0.0, 0.0, 0.0)), geometry.ffun, geometry.markers[\"BASE\"][0]\n",
    "    )\n",
    "    return bc\n",
    "\n",
    "dirichlet_bc = [fix_basal_plane]\n",
    "\n",
    "lvp = Constant(0.0)\n",
    "lv_marker = geometry.markers[\"ENDO\"][0]\n",
    "lv_pressure = pulse.NeumannBC(traction=lvp, marker=lv_marker, name=\"lv\")\n",
    "neumann_bc = [lv_pressure]\n",
    "\n",
    "bcs = pulse.BoundaryConditions(dirichlet=dirichlet_bc, neumann=neumann_bc)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "for material_model in [\"neo_hookean\", \"guccione\", \"holzapfel_ogden\"]:\n",
    "\n",
    "    material = setup_material(material_model)\n",
    "    problem = pulse.MechanicsProblem(geometry, material, bcs)\n",
    "\n",
    "    pressures = [0.0]\n",
    "    volumes = [geometry.cavity_volume()]\n",
    "\n",
    "    for p in np.linspace(0, ED_pressure, 10)[1:]:\n",
    "        pulse.iterate.iterate(problem, lvp, p)\n",
    "\n",
    "        pressures.append(p)\n",
    "        volumes.append(geometry.cavity_volume(u=problem.state.split()[0]))\n",
    "\n",
    "    ax.plot(volumes, pressures, label=\" \".join(material_model.split(\"_\")))\n",
    "\n",
    "    # Reset pressure\n",
    "    lvp.assign(Constant(0.0))\n",
    "\n",
    "vs, ps = klotz_curve()\n",
    "ax.plot(vs, ps, linestyle=\"--\", label=\"Klotz curve\")\n",
    "ax.legend(loc=\"best\")\n",
    "ax.set_xlabel(\"Volume (ml)\")\n",
    "ax.set_ylabel(\"Pressure (kPa)\")\n",
    "plt.show()\n",
    "#plt.savefig(\"klotz_curve.png\")"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "main_language": "python",
   "notebook_metadata_filter": "-all"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
